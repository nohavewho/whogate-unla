name: Test and Lint

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'changelog/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'changelog/**'

jobs:
  web-test-lint:
    name: Web Tests and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Run ESLint
        run: |
          cd web
          npm run lint

      - name: Type check
        run: |
          cd web
          npm run build -- --noEmit
          
      - name: Build web (dry run)
        run: |
          cd web
          VITE_API_BASE_URL=/api \
          VITE_WS_BASE_URL=/api/ws \
          VITE_BASE_URL=/ \
          VITE_MCP_GATEWAY_BASE_URL=/mcp \
          npm run build

  go-tests:
    name: Go Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [apiserver, mcp-gateway, mock-user-svc]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          cache: true

      - name: Run tests for ${{ matrix.service }}
        run: |
          # 运行特定服务目录的测试
          go test ./cmd/${{ matrix.service }}/... -v
          
          # 运行与服务相关的内部包测试
          go test ./internal/${{ matrix.service }}/... -v -race

      - name: Generate coverage report
        run: |
          # 生成覆盖率报告
          go test ./cmd/${{ matrix.service }}/... -coverprofile=coverage-${{ matrix.service }}.txt -covermode=atomic
          go test ./internal/${{ matrix.service }}/... -coverprofile=coverage-internal-${{ matrix.service }}.txt -covermode=atomic
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-${{ matrix.service }}.txt,./coverage-internal-${{ matrix.service }}.txt
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage
          fail_ci_if_error: false

  common-lib-tests:
    name: Common Libraries Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          cache: true

      - name: Run tests for pkg and shared packages
        run: |
          # 测试pkg目录下的共享库
          go test ./pkg/... -v -race
          
          # 测试internal/common目录（如果存在）
          if [ -d "./internal/common" ]; then
            go test ./internal/common/... -v -race
          fi

      - name: Generate coverage report
        run: |
          # 生成覆盖率报告
          go test ./pkg/... -coverprofile=coverage-pkg.txt -covermode=atomic
          
          # 为internal/common生成覆盖率报告（如果存在）
          if [ -d "./internal/common" ]; then
            go test ./internal/common/... -coverprofile=coverage-common.txt -covermode=atomic
          fi
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-pkg.txt,./coverage-common.txt
          flags: common-libs
          name: common-libs-coverage
          fail_ci_if_error: false

  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          
      - name: Check if builds succeed
        run: |
          # 检查所有服务是否能成功构建
          go build -v ./cmd/apiserver
          go build -v ./cmd/mcp-gateway
          go build -v ./cmd/mock-user-svc 